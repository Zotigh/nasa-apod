/*
 *  Copyright 2019 Nicholas Bennett & Deep Dive Coding
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package edu.cnm.deepdive.nasaapod.model.entity;

import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.Ignore;
import android.arch.persistence.room.Index;
import android.arch.persistence.room.PrimaryKey;
import android.support.annotation.NonNull;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import edu.cnm.deepdive.util.Date;
import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Encapsulates the attributes of a single NASA Astronomy Picture of the Day (APOD). Room and GSon
 * annotations are used to specify entity &amp; attribute mapping for database persistence, and
 * property mapping for JSON serialization/deserialization mapping.
 */
@Entity(
    indices = @Index(value = "date", unique = true)
)
public class Apod implements Serializable, Comparable<Apod> {

  private static final long serialVersionUID = 2547946263420122184L;
  private static final String IMAGE_MEDIA_TYPE = "image";

  @ColumnInfo(name = "apod_id")
  @PrimaryKey(autoGenerate = true)
  private long id;

  @NonNull
  @Expose
  private Date date;

  @Expose
  private String title;

  @Expose
  private String explanation;

  @Expose
  private String copyright;

  @Expose
  private String url;

  @Expose
  @SerializedName("media_type")
  private String mediaType;

  @Expose
  @SerializedName("hdurl")
  private String hdUrl;

  @Ignore
  @Expose
  @SerializedName("service_version")
  private transient String serviceVersion;

  @Ignore
  private transient Integer hash;

  @Ignore
  private transient Map<String, Object> toStringMap;

  private void clearTransients() {
    hash = null;
    toStringMap = null;
  }

  /**
   * Returns the autogenerated primary key of this instance.
   *
   * @return primary key value.
   */
  public long getId() {
    return id;
  }

  /**
   * Sets the primary key of this instance. This method is invoked by Room to set the autogenerated
   * value of a new instance, and when loading an existing instance from the database.
   *
   * @param id primary key value.
   */
  public void setId(long id) {
    this.id = id;
    clearTransients();
  }

  /**
   * Returns the date (only) of this instance.
   *
   * @return date of APOD.
   */
  public Date getDate() {
    return date;
  }

  /**
   * Sets the date (only) of this instance. This method is invoked by Room and GSon after loading
   * from the database and JSON deserialization, respectively.
   *
   * @param date APOD date.
   */
  public void setDate(Date date) {
    this.date = date;
    clearTransients();
  }

  /**
   * Returns the title of this instance.
   *
   * @return APOD title.
   */
  public String getTitle() {
    return title;
  }

  /**
   * Sets the title of this instance. This method is invoked by Room and GSon after loading from the
   * database and JSON deserialization, respectively.
   *
   * @param title APOD title.
   */
  public void setTitle(String title) {
    this.title = title;
    clearTransients();
  }

  /**
   * Returns the explanation (descriptive information) of this instance.
   *
   * @return APOD explanation.
   */
  public String getExplanation() {
    return explanation;
  }

  /**
   * Sets the explanation (descriptive information) of this instance. This method is invoked by Room
   * and GSon after loading from the database and JSON deserialization, respectively.
   *
   * @param explanation APOD explanation (descriptive information).
   */
  public void setExplanation(String explanation) {
    this.explanation = explanation;
    clearTransients();
  }

  /**
   * Returns the copyright information (or null, if none) of this instance.
   *
   * @return APOD copyright.
   */
  public String getCopyright() {
    return copyright;
  }

  /**
   * Sets the copyright information of this instance. This method is invoked by Room and GSon after
   * loading from the database and JSON deserialization, respectively.
   *
   * @param copyright APOD copyright information.
   */
  public void setCopyright(String copyright) {
    this.copyright = copyright;
    clearTransients();
  }

  /**
   * Returns the URL of the media content of this instance.
   *
   * @return APOD media content URL.
   */
  public String getUrl() {
    return url;
  }

  /**
   * Sets the URL of the media content of this instance. This method is invoked by Room and GSon
   * after loading from the database and JSON deserialization, respectively.
   *
   * @param url APOD media content URL.
   */
  public void setUrl(String url) {
    this.url = url;
    clearTransients();
  }

  /**
   * Returns the media type of this instance. Note that this is not a MIME type, but simply one of
   * the two values, "image" and "video".
   *
   * @return APOD media type.
   */
  public String getMediaType() {
    return mediaType;
  }

  /**
   * Sets the media type of this instance. This method is invoked by Room and GSon after loading
   * from the database and JSON deserialization, respectively.
   *
   * @param mediaType APOD media type.
   */
  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
    clearTransients();
  }

  /**
   * Returns the URL of the high-definition media content (if available) of this instance.
   *
   * @return APOD high-definition content URL.
   */
  public String getHdUrl() {
    return hdUrl;
  }

  /**
   * Sets the high-definition URL of the media content of this instance. This method is invoked by
   * Room and GSon after loading from the database and JSON deserialization, respectively.
   *
   * @param hdUrl APOD high-definition content URL.
   */
  public void setHdUrl(String hdUrl) {
    this.hdUrl = hdUrl;
    clearTransients();
  }

  /**
   * Returns the NASA APOD service version identifier (currently "v1") of this instance.
   *
   * @return APOD service version identifier.
   */
  public String getServiceVersion() {
    return serviceVersion;
  }

  /**
   * Sets the NASA APOD service version identifierof this instance. This method is invoked by GSon
   * after JSON deserialization.
   *
   * @param serviceVersion APOD service version identifier.
   */
  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
    clearTransients();
  }

  /**
   * Returns a flag indicating whether the media content of this instance is an image (vs. a video).
   *
   * @return <code>true</code> if media content is image; <code>false</code> otherwise.
   */
  public boolean isMediaImage() {
    return mediaType.equals(IMAGE_MEDIA_TYPE);
  }

  /**
   * Compares this instance to another for state (not reference) equality. Both instances must be of
   * the same instance type. The entity ID (returned by {@link #getId()}) is not considered part of
   * the state for comparison purposes; neither is the service version ({@link
   * #getServiceVersion()}) significant in equality comparison.
   *
   * @param obj other instance.
   * @return <code>true</code> if this instance is equal in significant state to <code>obj</code>.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj == null || getClass() != obj.getClass()) {
      return false;
    }
    Apod other = (Apod) obj;
    return date.toEpochDays() == other.date.toEpochDays()
        && Objects.equals(title, other.title)
        && Objects.equals(explanation, other.explanation)
        && Objects.equals(url, other.url)
        && Objects.equals(hdUrl, other.hdUrl)
        && Objects.equals(mediaType, other.mediaType)
        && Objects.equals(copyright, other.copyright);
  }

  /**
   * Computes and returns a value code based on the fields composing this instance.
   *
   * @return hash value.
   */
  @Override
  public int hashCode() {
    if (hash == null) {
      hash = Objects.hash(date, title, explanation, copyright, url, hdUrl, mediaType);
    }
    return hash;
  }

  @Override
  public String toString() {
    if (toStringMap == null) {
      toStringMap = new LinkedHashMap<>();
      toStringMap.put("id", id);
      toStringMap.put("date", date);
      toStringMap.put("title", title);
      toStringMap.put("explanation", explanation);
      toStringMap.put("copyright", copyright);
      toStringMap.put("url", url);
      toStringMap.put("hdUrl", hdUrl);
      toStringMap.put("mediaType", mediaType);
    }
    return toStringMap.toString();
  }

  @Override
  public int compareTo(@NonNull Apod other) {
    return date.compareTo(other.date);
  }

}
